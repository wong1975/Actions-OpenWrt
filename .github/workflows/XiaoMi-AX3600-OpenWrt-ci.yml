#
# This is free software, license use MIT.
#
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
#
# <https://github.com/KFERMercer/OpenWrt-CI>


name: OpenWrt官方源编译XiaoMi-AX3600

permissions:
  contents: write
  actions: write

env:
  REMOTE_REPOSITORY: qosmio/openwrt-ipq
  REMOTE_BRANCH: main-nss
  CONFIG_FILE: ax3600.config
  CUSTOM_FILES_PATH: files/
  RELEASE_PREFIX: main-nss
  NSS_PACKAGES_REPOSITORY: qosmio/nss-packages
  NSS_PACKAGES_REPOSITORY_BRANCH: NSS-12.5-K6.x

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
      - '.config'
  workflow_dispatch:
    inputs:
      manual_config:
        description: "Manually generate XiaoMi-AX3600 config via SSH (y/n)"
        default: "y"
        required: true



jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-22.04
    outputs:
      new_commits: ${{ steps.check_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_commits.outputs.latest_commit_sha }}
      nss_packages_repo_new_commits: ${{ steps.check_commits.outputs.nss_packages_repo_new_commits }}
      nss_packages_repo_latest_commit_sha: ${{ steps.check_commits.outputs.nss_packages_repo_latest_commit_sha }}
    steps:
      - name: Check for new commits in both repositories
        id: check_commits
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_sha=$(gh api "repos/${{ env.REMOTE_REPOSITORY }}/commits/${{ env.REMOTE_BRANCH }}" --jq .sha)
          packages_sha=$(gh api "repos/${{ env.NSS_PACKAGES_REPOSITORY }}/commits/${{ env.NSS_PACKAGES_REPOSITORY_BRANCH }}" --jq .sha)
          release_body=$(gh api "repos/${{ github.repository }}/releases/latest" --jq .body 2>/dev/null || echo "")

          new_commits=$([[ "$release_body" == *"$latest_sha"* ]] && echo "false" || echo "true")
          nss_new_commits=$([[ "$release_body" == *"$packages_sha"* ]] && echo "false" || echo "true")

          echo "new_commits=$new_commits" >> "$GITHUB_OUTPUT"
          echo "latest_commit_sha=$latest_sha" >> "$GITHUB_OUTPUT"
          echo "nss_packages_repo_new_commits=$nss_new_commits" >> "$GITHUB_OUTPUT"
          echo "nss_packages_repo_latest_commit_sha=$packages_sha" >> "$GITHUB_OUTPUT"
          
  build:
    #runs-on: ubuntu-24.04
    runs-on: ubuntu-22.04
    #runs-on: ubuntu-22.04-lts
    #runs-on: ubuntu-latest

    steps:
      - name: "获取源码"
        uses: actions/checkout@v3

      - name: "初始化环境"
        env:
          DEBIAN_FRONTEND: noninteractive
          LANG: en_US.UTF-8
        run: |
          echo "Cleaning up..."
          docker rmi $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d/*
          sudo swapoff /swapfile && sudo rm -f /swapfile
          sudo -E apt-get -qq update
          sudo -E apt-get install -y \
            ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison \
            build-essential bzip2 ccache cmake cpio curl device-tree-compiler \
            fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged \
            help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev \
            libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev \
            libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build \
            p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev \
            qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: "克隆 OpenWrt 官方源代码"
        env:
          REPO_URL: https://github.com/wong1975/My_OpenWrt.git
          REPO_BRANCH: main
        run: git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt

      - name: "检查 OpenWrt 目录是否存在"
        run: |
          ls -l
          cd $GITHUB_WORKSPACE/openwrt || exit 1

      - name: "下载软件更新"
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          ./scripts/feeds update -a
          ./scripts/feeds update mos

      - name: "安装软件更新"
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          ./scripts/feeds install -a
          ./scripts/feeds install -a -p mos

      - name: "加载自定义配置"
        env:
          CONFIG_FILE: '.config'
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          cd $GITHUB_WORKSPACE/openwrt
          sed -i 's/--set=llvm\.download-ci-llvm=true/--set=llvm.download-ci-llvm=false/' feeds/packages/lang/rust/Makefile
          make defconfig V=s || { echo "make defconfig 失败"; exit 1; }
          grep CONFIG_TARGET .config
          
      # SSH 远程调试（tmate），自动进入 make menuconfig
      - name: SSH 远程调试（tmate）进入 menuconfig
        if: ${{ github.event.inputs.manual_config == 'y' }}
        uses: mxschmitt/action-tmate@v3
        
      - name: "下载包"
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: "多线程编译"
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          echo -e "$(nproc) threads for compilation..."
          make -j$(nproc)

      - name: "失败时使用单线程编译"
        if: failure()
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          make -j1 V=s

      - name: "整理固件文件"
        if: always()
        run: |
          TARGET_DIR=$(find openwrt/bin/targets -mindepth 2 -maxdepth 2 -type d | head -n 1)
          if [ -d "$TARGET_DIR" ]; then
            cd "$TARGET_DIR"
            rm -rf packages
            echo "FIRMWARE=$TARGET_DIR" >> $GITHUB_ENV
          else
            echo "Error: No target directory found!" >&2
            exit 1
          fi

      - name: "上传编译结果"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: OpenWrt_bin
          path: openwrt/bin

      - name: "上传固件"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: OpenWrt_firmware
          path: ${{ env.FIRMWARE }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipq807x-images
          path: bin/targets/qualcommax/ipq807x

  release:
    name: Create release
    needs: [check_commits, build]
    if: needs.build.result == 'success'
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ipq807x-images
          path: firmware
      - name: Set release date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV
      - name: Publish release
        uses: softprops/action-gh-release@master
        with:
          files: firmware/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: 🚀 OpenWrt Build Release ${{ env.RELEASE_DATE }}
          body: |
            ## 📦 OpenWrt Automated Build Release

            **Build Date:** ${{ env.RELEASE_DATE }}

            ### 🔄 Main Repository
            **Repository:** [${{ env.REMOTE_REPOSITORY }}](https://github.com/${{ env.REMOTE_REPOSITORY }})
            **Branch:** `${{ env.REMOTE_BRANCH }}`
            **Commit:** `${{ needs.check_commits.outputs.latest_commit_sha }}`

            ### 📦 NSS Packages
            **Repository:** [${{ env.NSS_PACKAGES_REPOSITORY }}](https://github.com/${{ env.NSS_PACKAGES_REPOSITORY }})
            **Branch:** `${{ env.NSS_PACKAGES_REPOSITORY_BRANCH }}`
            **Commit:** `${{ needs.check_commits.outputs.nss_packages_repo_latest_commit_sha }}`

            ### 📝 Build Information
            - **Target:** [Xiaomi Mi AIoT Router AX3600](https://openwrt.org/toh/xiaomi/ax3600)
            - **Configuration:** [`${{ env.CONFIG_FILE }}`](${{ env.CONFIG_FILE }})

            ### 📋 Notes
            - Automated build triggered by ${{ github.event_name }}
            - Previous releases are automatically cleaned up (keeping latest 2)
            ---
            _Generated by GitHub Actions 🤖_

      - name: Clean up old releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api repos/${{ github.repository }}/releases --paginate --jq '.[2:] | .[] | "\(.id) \(.tag_name)"' | while read id tag; do
            gh api -X DELETE "repos/${{ github.repository }}/releases/$id" && gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$tag" 2>/dev/null || true
          done
